#include <Modloader/il2cpp_helpers.h>

#include <Core/api/scenes/scene_load.h>
#include <Core/api/game/game.h>
#include <Modloader/app/methods/UnityEngine/Rigidbody.h>
#include <Modloader/windows_api/console.h>

namespace {
    using namespace app::classes;

    std::optional<il2cpp::WeakGCRef<app::GameObject>> broken_plank_go_ref;
    common::registration_handle_t on_update_handle = nullptr;

    auto on_scene_loaded = core::api::scenes::single_event_bus().register_handler("lumaSwampTransitionA", [](auto metadata, auto) {
        if (metadata->state == app::SceneState__Enum::Disabled) {
            on_update_handle = nullptr;
        }

        if (metadata->state != app::SceneState__Enum::Loaded) {
            return;
        }

        const auto scene_root_go = il2cpp::unity::get_game_object(metadata->scene->fields.SceneRoot);

        broken_plank_go_ref = il2cpp::WeakGCRef(
            il2cpp::unity::find_child(
                scene_root_go,
                std::vector<std::string>{
                    "physics",
                    "logWall",
                    "autogenerated",
                    "edge4",
                }
            )
        );

        on_update_handle = core::api::game::event_bus().register_handler(GameEvent::FixedUpdate, EventTiming::After, [](auto, auto) {
            if (!broken_plank_go_ref.has_value()) {
                return;
            }

            const auto broken_plank_go = **broken_plank_go_ref;
            const auto rotation = il2cpp::unity::get_local_rotation(broken_plank_go);
            if (std::abs(rotation.x) > 0.1f) {
                il2cpp::unity::set_local_rotation(broken_plank_go, {0.f, rotation.y, rotation.z});
            }
        });
    });
} // namespace
